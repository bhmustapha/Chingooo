import 'package:flutter/material.dart';
import 'package:carpooling/models/vehicle.dart';
import 'package:carpooling/services/vehicle_service.dart';

class AddVehiclePage extends StatefulWidget {
  @override
  _AddVehiclePageState createState() => _AddVehiclePageState();
}

class _AddVehiclePageState extends State<AddVehiclePage> {
  final _formKey = GlobalKey<FormState>();
  final VehicleService _vehicleService = VehicleService();

  final TextEditingController _numNatController = TextEditingController();
  final TextEditingController _makeController = TextEditingController();
  final TextEditingController _modelController = TextEditingController();
  final TextEditingController _yearController = TextEditingController();
  final TextEditingController _licensePlateController = TextEditingController();
  final TextEditingController _colorController = TextEditingController();
  final TextEditingController _capacityController = TextEditingController();

  bool _isLoading = false;

  Future<void> _addVehicle() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      try {
        final userId = _vehicleService.currentUserId;
        if (userId == null) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Error: User not logged in.')),
          );
          return;
        }

        final newVehicle = Vehicle(
          id: '', // ID will be generated by Firestore
          driverId: userId,
          make: _makeController.text.trim(),
          model: _modelController.text.trim(),
          year: int.parse(_yearController.text.trim()),
          licensePlate: _licensePlateController.text.trim(),
          color: _colorController.text.trim(),
          capacity: int.parse(_capacityController.text.trim()),
        );
        final numNat = _numNatController.text.trim();

        await _vehicleService.addVehicle(newVehicle, numNat);

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Vehicle added successfully!')),
        );
        Navigator.pop(context);
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add vehicle: $e')),
        );
      } finally {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _makeController.dispose();
    _modelController.dispose();
    _yearController.dispose();
    _licensePlateController.dispose();
    _colorController.dispose();
    _capacityController.dispose();
    super.dispose();
  }

  // reusable design
  InputDecoration _buildInputDecoration(String labelText, IconData icon) {
    return InputDecoration(
      labelText: labelText,
      prefixIcon: Icon(icon, color: Theme.of(context).colorScheme.primary.withOpacity(0.7)),
      labelStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.w300), 
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(25.0),
      ),
      enabledBorder: OutlineInputBorder( 
        borderRadius: BorderRadius.circular(25.0),
      ),
      focusedBorder: OutlineInputBorder( 
        borderRadius: BorderRadius.circular(25.0),
        borderSide: BorderSide(color: Theme.of(context).colorScheme.primary, width: 2.0),
      ),
      contentPadding: EdgeInsets.symmetric(vertical: 15.0, horizontal: 16.0), 
    );
  }
 

  @override
  Widget build(BuildContext context) {
    // Define min/max year for validation
    final int currentYear = DateTime.now().year;
    final int minAllowedYear = 1980; //  min year
    final int maxAllowedYear = currentYear + 1; //  Allow current year + 1 for new models

    final int minPassengerCapacity = 1; 
    final int maxPassengerCapacity = 8;

    return Scaffold(
      appBar: AppBar(
        elevation: 0,
        title: const Text('Add New Vehicle'),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _numNatController,
                decoration: _buildInputDecoration('Administrative Number ', Icons.badge),
                validator: (value) {
                  if (value == null || value.length != 18){
                    return 'Enter a valid administrative number';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _makeController,
                decoration: _buildInputDecoration('Make (e.g., Renault)', Icons.car_rental), 
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter vehicle make';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _modelController,
                decoration: _buildInputDecoration('Model (e.g., Clio)', Icons.directions_car), 
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter vehicle model';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _yearController,
                decoration: _buildInputDecoration('Year (e.g., 2020)', Icons.calendar_today), 
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter vehicle year';
                  }
                  final int? year = int.tryParse(value);
                  if (year == null) {
                    return 'Please enter a valid year';
                  }
                  if (year < minAllowedYear) {
                    return 'Year cannot be before $minAllowedYear';
                  }
                  if (year > maxAllowedYear) {
                    return 'Year cannot be after $maxAllowedYear';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _licensePlateController,
                decoration: _buildInputDecoration('License Plate (e.g., 12345-123-12)', Icons.badge), 
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter license plate';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _colorController,
                decoration: _buildInputDecoration('Color (e.g., White)', Icons.color_lens), 
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter vehicle color';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _capacityController,
                decoration: _buildInputDecoration('Passenger Capacity (e.g., 3)', Icons.people), 
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter passenger capacity';
                  }
                  final int? capacity = int.tryParse(value);
                  if (capacity == null || int.parse(value) <= 0) {
                    return 'Please enter a valid number of seats';
                  }
                  if (capacity < minPassengerCapacity) {
                    return 'Capacity must be at least $minPassengerCapacity';
                  }
                  if (capacity > maxPassengerCapacity) {
                    return 'Capacity cannot exceed $maxPassengerCapacity';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 32),
              _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : ElevatedButton(
                    
                      onPressed: _addVehicle,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color.fromARGB(255, 33, 150, 243),
                        foregroundColor: Colors.white,
                        elevation: 0,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(25),
                        ),
                      ),
                      child: const Text(
                        'Add Vehicle',
                        style: TextStyle(fontSize: 15),
                      ),
                    ),
            ],
          ),
        ),
      ),
    );
  }
}